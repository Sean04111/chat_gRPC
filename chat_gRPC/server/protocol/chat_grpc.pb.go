// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: chat.proto

package chat_gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainChatClient is the client API for MainChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainChatClient interface {
	SendAll(ctx context.Context, opts ...grpc.CallOption) (MainChat_SendAllClient, error)
}

type mainChatClient struct {
	cc grpc.ClientConnInterface
}

func NewMainChatClient(cc grpc.ClientConnInterface) MainChatClient {
	return &mainChatClient{cc}
}

func (c *mainChatClient) SendAll(ctx context.Context, opts ...grpc.CallOption) (MainChat_SendAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &MainChat_ServiceDesc.Streams[0], "/chat.MainChat/SendAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainChatSendAllClient{stream}
	return x, nil
}

type MainChat_SendAllClient interface {
	Send(*Message) error
	CloseAndRecv() (*MainChatList, error)
	grpc.ClientStream
}

type mainChatSendAllClient struct {
	grpc.ClientStream
}

func (x *mainChatSendAllClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mainChatSendAllClient) CloseAndRecv() (*MainChatList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MainChatList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MainChatServer is the server API for MainChat service.
// All implementations must embed UnimplementedMainChatServer
// for forward compatibility
type MainChatServer interface {
	SendAll(MainChat_SendAllServer) error
	mustEmbedUnimplementedMainChatServer()
}

// UnimplementedMainChatServer must be embedded to have forward compatible implementations.
type UnimplementedMainChatServer struct {
}

func (UnimplementedMainChatServer) SendAll(MainChat_SendAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (UnimplementedMainChatServer) mustEmbedUnimplementedMainChatServer() {}

// UnsafeMainChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainChatServer will
// result in compilation errors.
type UnsafeMainChatServer interface {
	mustEmbedUnimplementedMainChatServer()
}

func RegisterMainChatServer(s grpc.ServiceRegistrar, srv MainChatServer) {
	s.RegisterService(&MainChat_ServiceDesc, srv)
}

func _MainChat_SendAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MainChatServer).SendAll(&mainChatSendAllServer{stream})
}

type MainChat_SendAllServer interface {
	SendAndClose(*MainChatList) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type mainChatSendAllServer struct {
	grpc.ServerStream
}

func (x *mainChatSendAllServer) SendAndClose(m *MainChatList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mainChatSendAllServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MainChat_ServiceDesc is the grpc.ServiceDesc for MainChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.MainChat",
	HandlerType: (*MainChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendAll",
			Handler:       _MainChat_SendAll_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
